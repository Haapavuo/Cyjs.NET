[{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net.html","title":"Cyjs.NET","content":"CyGraph \nCyParam \nCyParamMapper \nElements \nHTML \nPlainJsonString"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html","title":"CyGraph","content":"CyGraph \n \nCyGraph.initEmpty \ninitEmpty \nCyGraph.withElements \nwithElements \nCyGraph.withStyle \nwithStyle \nCyGraph.withStyles \nwithStyles \nCyGraph.withLayout \nwithLayout \nCyGraph.withSize \nwithSize \nCyGraph.withCanvas \nwithCanvas \nCyGraph.withZoom \nwithZoom \nCyGraph.show \nshow"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html#initEmpty","title":"CyGraph.initEmpty","content":"CyGraph.initEmpty \ninitEmpty \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html#withElements","title":"CyGraph.withElements","content":"CyGraph.withElements \nwithElements \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html#withStyle","title":"CyGraph.withStyle","content":"CyGraph.withStyle \nwithStyle \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html#withStyles","title":"CyGraph.withStyles","content":"CyGraph.withStyles \nwithStyles \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html#withLayout","title":"CyGraph.withLayout","content":"CyGraph.withLayout \nwithLayout \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html#withSize","title":"CyGraph.withSize","content":"CyGraph.withSize \nwithSize \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html#withCanvas","title":"CyGraph.withCanvas","content":"CyGraph.withCanvas \nwithCanvas \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html#withZoom","title":"CyGraph.withZoom","content":"CyGraph.withZoom \nwithZoom \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cygraph.html#show","title":"CyGraph.show","content":"CyGraph.show \nshow \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html","title":"CyParam","content":"CyParam \n \nCyParam.Background \nBackground \nCyParam.Border \nBorder \nCyParam.Curve \nCurve \nCyParam.Line \nLine \nCyParam.Shape \nShape \nCyParam.Source \nSource \nCyParam.Target \nTarget \nCyParam.Text \nText \nCyParam.CyStyleClass \nCyStyleClass \nCyParam.CyStyleParam \nCyStyleParam \nCyParam.style \nstyle \nCyParam.cyClass \ncyClass \nCyParam.color \ncolor \nCyParam.content \ncontent \nCyParam.height \nheight \nCyParam.label \nlabel \nCyParam.opacity \nopacity \nCyParam.shape \nshape \nCyParam.weight \nweight \nCyParam.width \nwidth"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#style","title":"CyParam.style","content":"CyParam.style \nstyle \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#cyClass","title":"CyParam.cyClass","content":"CyParam.cyClass \ncyClass \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#color","title":"CyParam.color","content":"CyParam.color \ncolor \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#content","title":"CyParam.content","content":"CyParam.content \ncontent \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#height","title":"CyParam.height","content":"CyParam.height \nheight \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#label","title":"CyParam.label","content":"CyParam.label \nlabel \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#opacity","title":"CyParam.opacity","content":"CyParam.opacity \nopacity \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#shape","title":"CyParam.shape","content":"CyParam.shape \nshape \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#weight","title":"CyParam.weight","content":"CyParam.weight \nweight \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam.html#width","title":"CyParam.width","content":"CyParam.width \nwidth \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-background.html","title":"Background","content":"Background \n \nBackground.color \ncolor"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-background.html#color","title":"Background.color","content":"Background.color \ncolor \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-border.html","title":"Border","content":"Border \n \nBorder.color \ncolor \nBorder.width \nwidth"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-border.html#color","title":"Border.color","content":"Border.color \ncolor \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-border.html#width","title":"Border.width","content":"Border.width \nwidth \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-curve.html","title":"Curve","content":"Curve \n \nCurve.style \nstyle"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-curve.html#style","title":"Curve.style","content":"Curve.style \nstyle \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-line.html","title":"Line","content":"Line \n \nLine.color \ncolor \nLine.style \nstyle"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-line.html#color","title":"Line.color","content":"Line.color \ncolor \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-line.html#style","title":"Line.style","content":"Line.style \nstyle \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-shape.html","title":"Shape","content":"Shape \n \nShape.triangle \ntriangle \nShape.ellipse \nellipse \nShape.octagon \noctagon \nShape.rectangle \nrectangle"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-shape.html#triangle","title":"Shape.triangle","content":"Shape.triangle \ntriangle \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-shape.html#ellipse","title":"Shape.ellipse","content":"Shape.ellipse \nellipse \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-shape.html#octagon","title":"Shape.octagon","content":"Shape.octagon \noctagon \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-shape.html#rectangle","title":"Shape.rectangle","content":"Shape.rectangle \nrectangle \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-source.html","title":"Source","content":"Source \n \nSource.Arrow \nArrow"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-source-arrow.html","title":"Arrow","content":"Arrow \n \nArrow.shape \nshape \nArrow.color \ncolor"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-source-arrow.html#shape","title":"Arrow.shape","content":"Arrow.shape \nshape \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-source-arrow.html#color","title":"Arrow.color","content":"Arrow.color \ncolor \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-target.html","title":"Target","content":"Target \n \nTarget.Arrow \nArrow"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-target-arrow.html","title":"Arrow","content":"Arrow \n \nArrow.shape \nshape \nArrow.color \ncolor"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-target-arrow.html#shape","title":"Arrow.shape","content":"Arrow.shape \nshape \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-target-arrow.html#color","title":"Arrow.color","content":"Arrow.color \ncolor \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-text.html","title":"Text","content":"Text \n \nText.Align \nAlign \nText.Outline \nOutline \nText.opacity \nopacity"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-text.html#opacity","title":"Text.opacity","content":"Text.opacity \nopacity \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-text-align.html","title":"Align","content":"Align \n \nAlign.center \ncenter \nAlign.left \nleft \nAlign.right \nright"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-text-align.html#center","title":"Align.center","content":"Align.center \ncenter \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-text-align.html#left","title":"Align.left","content":"Align.left \nleft \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-text-align.html#right","title":"Align.right","content":"Align.right \nright \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-text-outline.html","title":"Outline","content":"Outline \n \nOutline.width \nwidth \nOutline.color \ncolor"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-text-outline.html#width","title":"Outline.width","content":"Outline.width \nwidth \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-text-outline.html#color","title":"Outline.color","content":"Outline.color \ncolor \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-cystyleclass.html","title":"CyStyleClass","content":"CyStyleClass \n \nCyStyleClass.Class \nClass"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-cystyleclass.html#Class","title":"CyStyleClass.Class","content":"CyStyleClass.Class \nClass \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-cystyleparam.html","title":"CyStyleParam","content":"CyStyleParam \n \nCyStyleParam.Name \nName \nCyStyleParam.Value \nValue"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-cystyleparam.html#Name","title":"CyStyleParam.Name","content":"CyStyleParam.Name \nName \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparam-cystyleparam.html#Value","title":"CyStyleParam.Value","content":"CyStyleParam.Value \nValue \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparammapper.html","title":"CyParamMapper","content":"CyParamMapper \n \nCyParamMapper.( =. ) \n( =. ) \nCyParamMapper.( \u003C=. ) \n( \u003C=. )"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparammapper.html#( =. )","title":"CyParamMapper.( =. )","content":"CyParamMapper.( =. ) \n( =. ) \n\n Specifies a direct mapping to an element\u2019s data field. For example,\n data(descr) would map a property to the value in an element\u2019s descr field in its data (i.e. ele.data(\u0022descr\u0022)).\n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-cyparammapper.html#( \u003C=. )","title":"CyParamMapper.( \u003C=. )","content":"CyParamMapper.( \u003C=. ) \n( \u003C=. ) \n\n Specifies a linear mapping to an element\u2019s data field. For example, \n mapData(weight, 0, 100, blue, red) maps an element\u2019s weight to colours between blue and red for weights between 0 and 100.\n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-elements.html","title":"Elements","content":"Elements \n \nElements.node \nnode \nElements.edge \nedge \nElements.withClass \nwithClass"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-elements.html#node","title":"Elements.node","content":"Elements.node \nnode \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-elements.html#edge","title":"Elements.edge","content":"Elements.edge \nedge \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-elements.html#withClass","title":"Elements.withClass","content":"Elements.withClass \nwithClass \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-html.html","title":"HTML","content":"HTML \n\n HTML template for Cytoscape\n \nHTML.doc \ndoc \nHTML.graphDoc \ngraphDoc \nHTML.toCytoHTML \ntoCytoHTML \nHTML.toEmbeddedHTML \ntoEmbeddedHTML \nHTML.show \nshow"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-html.html#doc","title":"HTML.doc","content":"HTML.doc \ndoc \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-html.html#graphDoc","title":"HTML.graphDoc","content":"HTML.graphDoc \ngraphDoc \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-html.html#toCytoHTML","title":"HTML.toCytoHTML","content":"HTML.toCytoHTML \ntoCytoHTML \n\n Converts a CyGraph to it HTML representation. The div layer has a default size of 600 if not specified otherwise.\n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-html.html#toEmbeddedHTML","title":"HTML.toEmbeddedHTML","content":"HTML.toEmbeddedHTML \ntoEmbeddedHTML \n\n Converts a CyGraph to it HTML representation and embeds it into a html page.\n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-html.html#show","title":"HTML.show","content":"HTML.show \nshow \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-plainjsonstring.html","title":"PlainJsonString","content":"PlainJsonString \n \nPlainJsonString.( .ctor ) \n( .ctor ) \nPlainJsonString.Value \nValue"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-plainjsonstring.html#( .ctor )","title":"PlainJsonString.( .ctor )","content":"PlainJsonString.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fslab.org/Cyjs.NET/reference/cyjs-net-plainjsonstring.html#Value","title":"PlainJsonString.Value","content":"PlainJsonString.Value \nValue \n"},{"uri":"https://fslab.org/Cyjs.NET/example.html","title":"More Complex Example Graph\r\n","content":"(**\n# More Complex Example Graph\n\nHere, we can look at a more colorful example to understand the functionality of Cyjs.NET. The example is translated from [here](www.w.de)\nto cover different styling capabilities. \n*)\n\n#r \u0022nuget: DynamicObj, 0.0.1\u0022\n#r \u0022nuget: Newtonsoft.Json, 12.0.3\u0022\n#r \u0022../bin/Cyjs.NET/netstandard2.1/Cyjs.NET.dll\u0022\n\n\n(**\n## Adding nodes and edges with data\n\nAfter including the necessary dependancies, we can add the elements with data to our graph.\nAdditionaly, the \u0060withClass\u0060 function adds a class identifier \u0060(CyParam.cyClass \u0022questionable\u0022)\u0060 to the respective edge.\nThis can be used for individual styling, that you will see later...  \n*)\n\nopen Cyjs.NET\nopen Elements\n\nlet myGraph = \n    CyGraph.initEmpty ()\n    |\u003E CyGraph.withElements [\n            node \u0022j\u0022 [ CyParam.label \u0022Jerry\u0022  ; CyParam.weight 65; CyParam.color \u0022#6FB1FC\u0022; CyParam.shape \u0022triangle\u0022  ]\n            node \u0022e\u0022 [ CyParam.label \u0022Elaine\u0022 ; CyParam.weight 45; CyParam.color \u0022#EDA1ED\u0022; CyParam.shape \u0022ellipse\u0022  ]\n            node \u0022k\u0022 [ CyParam.label \u0022Kramer\u0022 ; CyParam.weight 75; CyParam.color \u0022#86B342\u0022; CyParam.shape \u0022octagon\u0022  ]\n            node \u0022g\u0022 [ CyParam.label \u0022George\u0022 ; CyParam.weight 70; CyParam.color \u0022#F5A45D\u0022; CyParam.shape \u0022rectangle\u0022  ]\n\n            edge  \u00221\u0022 \u0022j\u0022 \u0022e\u0022 [CyParam.color \u0022#6FB1FC\u0022; CyParam.weight 90]\n            edge  \u00222\u0022 \u0022j\u0022 \u0022e\u0022 [CyParam.color \u0022#6FB1FC\u0022; CyParam.weight 120]\n            edge  \u00223\u0022 \u0022j\u0022 \u0022k\u0022 [CyParam.color \u0022#6FB1FC\u0022; CyParam.weight 70]\n            edge  \u00224\u0022 \u0022j\u0022 \u0022g\u0022 [CyParam.color \u0022#6FB1FC\u0022; CyParam.weight 80]\n     \n            edge  \u00225\u0022 \u0022e\u0022 \u0022j\u0022 [CyParam.color \u0022#EDA1ED\u0022; CyParam.weight 95]\n            edge  \u00226\u0022 \u0022e\u0022 \u0022k\u0022 [CyParam.color \u0022#EDA1ED\u0022; CyParam.weight 60] \n                |\u003E withClass (CyParam.cyClass \u0022questionable\u0022) // classes: \u0027questionable\u0027\n             \n            edge  \u00227\u0022 \u0022k\u0022 \u0022j\u0022 [CyParam.color \u0022#86B342\u0022; CyParam.weight 100]\n            edge  \u00228\u0022 \u0022k\u0022 \u0022e\u0022 [CyParam.color \u0022#86B342\u0022; CyParam.weight 100]\n            edge  \u00229\u0022 \u0022k\u0022 \u0022g\u0022 [CyParam.color \u0022#86B342\u0022; CyParam.weight 100]\n     \n            edge \u002210\u0022 \u0022g\u0022 \u0022j\u0022 [CyParam.color \u0022#F5A45D\u0022; CyParam.weight 90]\n            edge \u002211\u0022 \u0022g\u0022 \u0022g\u0022 [CyParam.color \u0022#F5A45D\u0022; CyParam.weight 90]\n            edge \u002212\u0022 \u0022g\u0022 \u0022g\u0022 [CyParam.color \u0022#F5A45D\u0022; CyParam.weight 90]\n            edge \u002213\u0022 \u0022g\u0022 \u0022g\u0022 [CyParam.color \u0022#F5A45D\u0022; CyParam.weight 90]\n\n        ]\n(**\n## Styling the nodes\n\nUsing the \u0060withStyle\u0060 function we use a selector string (here: node) to specify the target that we want to style.\nSecond, we provide a list of style paramerts \u0060CyStyleParam\u0060 to set the design.\n**attention** Style mapper \u0060=.\u0060 specifies a direct mapping or a linear mapping \u0060\u003C=.\u0060 to an element\u2019s data field. \n*)\n\n    |\u003E CyGraph.withStyle \u0022node\u0022     \n            [\n                CyParam.shape =. CyParam.shape\n                // Style mapper can also be used untyped in string form: CyParam.shape \u0022data(shape)\u0022\n                CyParam.width \u003C=.(CyParam.weight, 40, 80, 20, 60)\n                // A linear style mapper like this: CyParam.width \u0022mapData(weight, 40, 80, 20, 60)\u0022\n                CyParam.content =. CyParam.label\n                CyParam.Text.Align.center\n                CyParam.Text.Outline.width 2\n                CyParam.Text.Outline.color =. CyParam.color\n                CyParam.Background.color =. CyParam.color\n                CyParam.color \u0022#fff\u0022\n            ]\n(**\n## Interactivity\n\nHere, the active selector \u0060:selected\u0060 is used to select and style the activly selected node.  \n*)\n\n    |\u003E CyGraph.withStyle \u0022:selected\u0022     \n            [\n                CyParam.Border.width 3\n                CyParam.Border.color \u0022#333\u0022\n            ]\n(**\n## Styling the edges\n\nStyling the edges is analogous to adapting the node style. \n\n*)\n\n    |\u003E CyGraph.withStyle \u0022edge\u0022     \n            [\n                CyParam.Curve.style \u0022bezier\u0022\n                CyParam.opacity 0.666\n                CyParam.width \u0022mapData(weight, 70, 100, 2, 6)\u0022\n                CyParam.Target.Arrow.shape \u0022triangle\u0022\n                CyParam.Source.Arrow.shape \u0022circle\u0022\n                CyParam.Line.color =. CyParam.color\n                CyParam.Target.Arrow.color =. CyParam.color\n                CyParam.Source.Arrow.color =. CyParam.color\n            ]\n(**\n# Edge stylinng eith class identifier\nThe class identifier \u0060questionable\u0060 can be used to select and style the respective edge(s).  \n*)\n\n    |\u003E CyGraph.withStyle \u0022edge.questionable\u0022     \n            [\n                CyParam.Line.style \u0022dotted\u0022\n                CyParam.Target.Arrow.shape \u0022diamond\u0022\n            ]\n    |\u003E CyGraph.withStyle \u0022.faded\u0022     \n            [\n                CyParam.opacity 0.666\n                CyParam.Text.opacity 0\n            ]\n(**\n# Using a graph layout\n\nTo draw the graph nicly, \u0060withLayout\u0060 applies CoSE (Compound graph Spring Embedder) layout, an algorithm based \non the traditional force-directed layout scheme with extensions to handle multi-level nesting, edges between nodes \nof arbitrary nesting level, varying node sizes, and other possible application-specific constraints.\n*)\n\n    |\u003E CyGraph.withLayout (CytoscapeModel.Layout.Init(\u0022cose\u0022)) \n    |\u003E CyGraph.withSize(800, 800)       \n    \n\n \n\n(***hide***)\nmyGraph |\u003E HTML.toEmbeddedHTML\n(***include-it-raw***)"},{"uri":"https://fslab.org/Cyjs.NET/index.html","title":"Cyjs.NET\r\n","content":"(*** hide ***)\n\n(*** condition: prepare ***)\n#r \u0022nuget: DynamicObj, 0.0.1\u0022\n#r \u0022nuget: Newtonsoft.Json, 12.0.3\u0022\n#r \u0022../bin/Cyjs.NET/netstandard2.1/Cyjs.NET.dll\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: Cyjs.NET, {{fsdocs-package-version}}\u0022\n#endif // IPYNB\n\n\n(**\n# Cyjs.NET\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/fslaborg/Cyjs.NET/gh-pages?filepath=index.ipynb)\n\nCyjs.NET is an interface for Cytoscape.js written in F# to visualiz complex networks and integrate these with any type of attribute data.\n\n### Table of contents \n\n- [Installation](#Installation)\n    - [For applications and libraries](#For-applications-and-libraries)\n    - [For scripting](#For-scripting)\n- [Overview](#Overview)\n    - [Basics](#Basics)\n        - [Initializing a graph](#Initializing-a-graph)\n        - [Attaching nodes and edges](#Attaching-nodes-and-edges)\n        - [Styling a graph](#Styling-a-graph)\n        - [Displaying a graph](#Displaying-a-graph)\n- [Contributing and copyright](#Contributing-and-copyright)\n\n# Installation\n\n\n## Installation\n\nThe following examples show how easy it is to start working with Cyjs.NET.\n\n### For applications and libraries\n\nYou can get all Cyjs.NET packages from nuget at [nuget page](https://www.nuget.org/packages/Cyjs.NET/).\n\n\n - dotnet CLI\n\n\u0060\u0060\u0060shell\ndotnet add package Cyjs.NET --version \u003Cdesired-version-here\u003E\n\u0060\u0060\u0060\n\nOr add the package reference directly to your \u0060.*proj\u0060 file:\n\n\u0060\u0060\u0060\n\u003CPackageReference Include=\u0022Cyjs.NET\u0022 Version=\u0022\u003Cdesired-version-here\u003E\u0022 /\u003E\n\u0060\u0060\u0060\n\n### For scripting\n\nYou can include the package via an inline package reference:\n\n\u0060\u0060\u0060\n#r \u0022nuget: Cyjs.NET, \u003Cdesired-version-here\u003E\u0022\n\u0060\u0060\u0060\n\n# Overview\n\n## Basics\n\nThe general design philosophy of Cyjs.NET implements the following visualization flow:\n\n- **initialize** a \u0060Cytoscape\u0060 object by using the \u0060CyGraph.initEmpty\u0060 function.\n- **attach** elements e.g. notes, edges and data to visulize\n- further **style** the graph with fine-grained control, e.g. by setting labels, color, etc.\n- **display** (in the browser or as cell result in a notebook) or save the graph (comming soon)\n\n### Initializing a graph\n\nThe \u0060CyGraph\u0060 module contains the \u0060CyGraph.initEmpty\u0060 function to create an empty graph.\nYou can therefore initialize a cytoscape graph like this:\n\n*)\nopen Cyjs.NET\nlet myFirstGraph = \n    CyGraph.initEmpty ()\n\n(**\n\n### Attach nodes and edges\n\nThe \u0060Elements\u0060 module contains the \u0060node\u0060 and \u0060edge\u0060 functions to create the respective element.\nNode and edges can be decorated with data as \u0060CyStyleParam list\u0060\nYou can therefore create a cytoscape graph with two nodes and an edge like this:\n\n*)\nopen Elements\n\nlet myGraph = \n    CyGraph.initEmpty ()\n    |\u003E CyGraph.withElements [\n            node \u0022n1\u0022 [ CyParam.label \u0022FsLab\u0022  ]\n            node \u0022n2\u0022 [ CyParam.label \u0022ML\u0022 ]\n \n            edge  \u0022e1\u0022 \u0022n1\u0022 \u0022n2\u0022 []\n        ]\n(**\n\n### Styling a graph\n\nStyling functions are generally the \u0060CyGraph.with*\u0060 naming convention. The following styling example does:\n\n - add two nodes including a text label\n - add an edge without any additional data \n - styles the nodes with color and content via \u0060CyGraph.withStyle\u0060\n - sets the graph size to 800 x 400 pixels via \u0060CyGraph.withSize\u0060\n\n*)\n\nlet myFirstStyledGraph =     \n    CyGraph.initEmpty ()\n    |\u003E CyGraph.withElements [\n            node \u0022n1\u0022 [ CyParam.label \u0022FsLab\u0022  ]\n            node \u0022n2\u0022 [ CyParam.label \u0022ML\u0022 ]\n \n            edge  \u0022e1\u0022 \u0022n1\u0022 \u0022n2\u0022 []\n \n        ]\n    |\u003E CyGraph.withStyle \u0022node\u0022     \n            [\n                CyParam.content =. CyParam.label\n                CyParam.color \u0022#A00975\u0022\n            ]\n    |\u003E CyGraph.withSize(800, 400)  \n\n(**\n**Attention:** \u0060=.\u0060 is a styling mapper and allows to pass data from different sources into the layout. \nHere the label attached to each node is rendered as content.  \n\n### Displaying a graph in the browser\n\nThe \u0060CyGraph.show\u0060 function will open a browser window and render the input graph there. When working in a notebook context\nyou want to use \u0060HTML.toEmbeddedHTML\u0060 for the moment,\n\n*)\n\n(***do-not-eval***)\nmyGraph\n|\u003E CyGraph.show\n\n(**Should render this chart in your brower:*)\n\n(***hide***)\nmyGraph |\u003E CyGraph.withSize(800, 400) |\u003E HTML.toEmbeddedHTML\n(*** include-it-raw ***)\n\n(***do-not-eval***)\nmyFirstStyledGraph\n|\u003E CyGraph.show\n\n(**And here is what happened after applying the styles from above:*)\n\n(***hide***)\nmyFirstStyledGraph |\u003E HTML.toEmbeddedHTML\n(*** include-it-raw ***)\n\n\n(**\n# Contributing and copyright\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests. If you\u0027re adding a new public API, please also \nconsider adding [samples][content] that can be turned into a documentation. You might\nalso want to read the [library design notes][readme] to understand how it works.\n\nThe library is available under Public Domain license, which allows modification and \nredistribution for both commercial and non-commercial purposes. For more information see the \n[License file][license] in the GitHub repository. \n\n  [content]: https://github.com/fslaborg/Cyjs.NET/tree/master/docs/content\n  [gh]: https://github.com/fslaborg/Cyjs.NET\n  [issues]: https://github.com/fslaborg/Cyjs.NET/issues\n  [readme]: https://github.com/fslaborg/Cyjs.NET/blob/master/README.md\n  [license]: https://github.com/fslaborg/Cyjs.NET/blob/master/LICENSE.txt\n*)"}]